mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
pairs(mpg ~ ., data = mtcars)
pairs(mtcars)
library(caret)
installed.packages("caret")
install.packages("caret")
library(caret); library(kernlab); data(spam)
head(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75. list=False )
inTrain <- createDataPartition(y=spam$type, p=0.75, list=False )
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE )
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
library(swirl)
swirl()
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
names(AlzheimerDisease)
summary(AlzheimerDisease)
mydb <- data(AlzheimerDisease)
head(mydb)
data(AlzheimerDisease)
head(diagnosis)
dim(diagnosis)
length(diagnosis)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(inTrain)
head(createDataPartition(mixtures$CompressiveStrength, p = 3/4))
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(mixtures)
qplot(CompressiveStrength, colour = predictors, data = training)
plot(mixtures$CompressiveStrength, colour = predictors, data = training)
plot(mixtures$CompressiveStrength, colour = names(mixtures), data = training)
plot(mixtures$CompressiveStrength, colour = cut2(mixtures$Cement,3), pch = 19)
install.packages("Hmisc")
library(Hmisc)
plot(mixtures$CompressiveStrength, colour = cut2(mixtures$Cement,3), pch = 19)
plot(mixtures$CompressiveStrength, col = cut2(mixtures$Cement,3), pch = 19)
warnings()
qplot(CompressiveStrength, colour = colour = cut2(mixtures$Cement,3), data = training)
qplot(CompressiveStrength, ccolour = cut2(mixtures$Cement,3), data = training)
plot(mixtures$CompressiveStrength, col = cut2(mixtures$Cement,3), pch = 19)
try <- cut2(mixtures$Cement,3)
head(try)
class(try)
summary(try)
cut2?
?cut2
head(mixtures$Cement)
str(try)
try <- cut2(mixtures$Cement,cuts = 3)
str(try)
try <- cut2(mixtures$Cement,cuts = 3, m=5)
str(try)
try <- cut2(mixtures$Cement,g = 3)
str(try)
plot(mixtures$CompressiveStrength, col = cut2(mixtures$Cement,g = 3), pch = 19)
names(mixtures)
str(mixtures)
par(mfrow = c(4,2))
plot(mixtures$CompressiveStrength, col = cut2(mixtures$Cement,g = 3), pch = 19)
plot(mixtures$CompressiveStrength, col = cut2(mixtures$FlyAsh,g = 3), pch = 19)
plot(mixtures$CompressiveStrength, col = cut2(mixtures$Age,g = 3), pch = 19)
par(mfrow = c(2,2))
par(mfrow = c(2,1))
plot(mixtures$CompressiveStrength, col = cut2(mixtures$FlyAsh,g = 3), pch = 19)
plot(mixtures$CompressiveStrength, col = cut2(mixtures$Age,g = 3), pch = 19)
par(mfrow = c(1,1))
qplot(SuperPlasticizer,data = training)
names(training)
hist(training$Superplasticizer)
set.seed(3433)data(AlzheimerDisease)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
IL_train <- training[,"IL-" in names$training]
IL_train <- training[,"IL"]
IL_train <- training[,grepl("IL", names(training))]
names(IL_train)
IL_train <- training[,grepl(^"IL", names(training))]
IL_train <- training[,grepl("^IL", names(training))]
names(IL_train)
preProc2 <- preProcess(log10(IL_train+1),method="pca",pcaComp=2)
head(IL_train)
preProc2 <- preProcess(IL_train ,method="pca",pcaComp=2)
summary(preProc2)
ILPC <- predict(preProc2,IL_train)
Summary(ILPC)
summary(ILPC)
str(ILPC)
names(ILPC)
length(ILPC$PC1)
preProc2$rotation
preProc2$pcaComp
preProc2$bc
preProc2$std
preProc_all <- preProcess(IL_train ,method="pca")
preProc_all$trace
preProc2 <- preProcess(IL_train ,method="pca",thresh = 0.8)
summary(preProc2)
head(preProc2)
preProc2
IL_train <- c(training$diagnosis,IL_train)
head(IL_train)
names(IL_train)
IL_training <- training[,c(1, grepl(^"IL", names(training)))]
IL_training <- training[,c(1, grepl("^IL", names(training)))]
names(IL_training)
names(try)
try <- grepl("^IL", names(training))
try
IL_training <- cbind(training[1], training[,try])
names(IL_training)
modelFit1 <- train(IL_training$diagnosis ~ .,method="glm",preProcess="pca",data=IL_training)
modelFit1 <- train(IL_training$diagnosis ~ .,method="glm",preProcess="pca",data=IL_training)
install.packages("e1071")
modelFit1 <- train(IL_training$diagnosis ~ .,method="glm",preProcess="pca",data=IL_training)
modelFit1 <- train(diagnosis ~ .,method="glm",preProcess="pca",data=IL_training)
modelFit2 <- train(diagnosis ~ .,method="glm",preProcess=c("pca", thresh = 0.8), data=IL_training)
modelFit1 <- train(diagnosis ~ .,method="glm",preProcess="pca",thresh = 0.8,data=IL_training)
modelFit1 <- train(diagnosis ~ .,method="glm",preProcess="pca",data=IL_training)
preProc1 <- preProcess(IL_training,method="pca")
preProc2 <- preProcess(IL_training,method="pca", thresh = 0.8)
train1 <- predict(preProc1,IL_training))
train1 <- predict(preProc1,IL_training)
train2 <- predict(preProc2,IL_training)
modelFit1 <- train(diagnosis ~ .,method="glm",data=train1)
modelFit2 <- train(diagnosis ~ .,method="glm",data=train2)
modelFit1
modelFit2
preProc2 <- preProcess(IL_train ,method="pca",thresh = 0.9)
preProc2 <- preProcess(IL_train ,method="pca",thresh = 0.9)
IL_train <- training[, grepl("^IL", names(training))]
preProc2 <- preProcess(IL_train ,method="pca",thresh = 0.9)
preProc2
library(caret)
library(AppliedPredictiveModeling)
library(ElemStatLearn); library(pgmm)
install.packages("ElemStatLearn","pgmm","rpart")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
install.packages("rpart")
library(ElemStatLearn); library(pgmm); library(rpart)
library(rpart)
?rpart
install.packages("rpart")
install.packages("rpart")
library(rpart)
data(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(ElemStatLearn); library(pgmm);
head(segmentationOriginal)
training <- segmentationOriginal[Case == "Train",]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
set.seed(125)
model1 <- train(Class ~ ., data = training, method = rpart)
mymodel <- train(Class ~ ., data = training, method = rpart)
model1 <- train(Class ~ ., data = training, method = "rpart")
install.packages("rattle")
library(rattle)
fancyRpartPlot(model1$finalModel)
library(pgmm)
data("olive")
olive = olive[,-1]
data(olive)
head(olive)
olive = olive[,-1]
head(olive)
model3 <- train(Area ~ ., data = olive, method = rpart)
model3 <- train(Area ~ ., data = olive, method = "rpart")
fancyRpartPlot(model3$finalModel)
predict(model3, newdata = as.data.frame(t(colMeans(olive))))
class(olive$Area)
head(olive$Area,50)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
set.seed(13234)
model4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA , method = )
model4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA , method = "glm", family="binomial")
class(trainSA$sbp)
class(trainSA$chd)
model4 <- train(factor(chd) ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA , method = "glm", family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
train_out <- predict(model4, newdata = trainSA)
test_out <- predict(model4, newdata = testSA)
missClass(trainSA,train_out)
model4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA , method = "glm", family="binomial")
train_out <- predict(model4, newdata = trainSA)
test_out <- predict(model4, newdata = testSA)
missClass(trainSA,train_out)
missClass(testSA,test_out)
missClass(trainSA$chd,train_out)
missClass(testSA$chd,test_out)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
model5 <- train(y ~ . , data = vowel.train , method = "rf")
model5 <- train(y ~ . , data = vowel.train , method = "rf")
pred5 <- predict(model5,vowel.test)
varImp(pred5)
?varImp
varImp(model5)
?createDataPartition
?table
library(ElemStatLearn)
data("vowel.train")
data("vowel.test")
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelrf <- train(y ~ . , data = vowel.train, method = "rf")
modelgbm <- train(y ~ . , data = vowel.train, method = "gbm")
modelrf
modelgbm
modelgbm <- train(y ~ . , data = vowel.train, method = "gbm")
modelgbm
modelrf
testrf <- predict(modelrf, newdata = vowel.test)
tesgbm <- predict(modelgbm, newdata = vowel.test)
testrf
modeltestrf <- train(y ~ . , data = vowel.test, method = "rf")
modeltestgbm <- train(y ~ . , data = vowel.test, method = "gbm", verbose = FALSE)
modeltestrf
modeltestgbm
?confusionMatrix
confusionMatrix(testrf,vowel.test$y)
testgbm <- predict(modelgbm, newdata = vowel.test)
confusionMatrix(tesgbm,vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
set.seed(62433)
modelrf <- train(diagnosis ~ . , data = training, method = "rf")
modelgbm <- train(diagnosis ~ . , data = training, method = "gbm" , verbose = FALSE)
modellda <- train(diagnosis ~ . , data = training, method = "lda")
predrf <- predict(modelrf, testing)
predgbm <- predict(modelgbm, newdata =  testing)
predrf <- predict(modelrf, newdata =  testing)
predlda <- predict(modellda, newdata =  testing)
predDF <- data.frame(predrf, predgbm, predlda, testing$diagnosis)
predDF <- data.frame(predrf, predgbm, predlda, diagnosis = testing$diagnosis)
modelstack <- train(diagnosis ~ . , data = predDF, method = "rf")
predstack <- predict(modelstack, newdata = predDF)
predstack <- predict(modelstack, newdata = testing)
confusionMatrix(predstack, training$diagnosis)
confusionMatrix(predstack, predDF$diagnosis)
confusionMatrix(predrf, predDF$diagnosis)
confusionMatrix(predgbm, predDF$diagnosis)
confusionMatrix(predlda, predDF$diagnosis)
set.seed(3523)
data(concrete)
inTrain3 <- createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
trainin3 <- concrete[inTrain3,]
testing3 <- concrete[-inTrain3,]
set.seed(233)
?plot.enet
??plot.enet
?enet
library(e1071)
?enet
install.packages("elasticnet")
?enet
library(elasticnet)
?enet
training3pred <- training3[,-CompressiveStrength]
training3pred <- trainin3[,-CompressiveStrength]
training3pred <- trainin3[,-trainin3$CompressiveStrength]
plot.enet(trainin3$CompressiveStrength, training3pred, lambda = 0)
plot.enet(as.character(trainin3$CompressiveStrength), training3pred, lambda = 0)
plot.enet(training3pred, trainin3$CompressiveStrength, lambda = 0)
plot.enet(ttrainin3, trainin3$CompressiveStrength, lambda = 0)
plot.enet(trainin3, trainin3$CompressiveStrength, lambda = 0)
model3 <- train(CompressiveStrength ~ . , data = trainin3 , method = "lasso")
plot.enet(trainin3, trainin3$CompressiveStrength, lambda = 0 , xvar = "Penalty")
plot.enet(trainin3, trainin3$CompressiveStrength, lambda = 0 , xvar = "penalty")
plot.enet(model3$finalModel, xvar = "penalty", use.color = TRUE)
library(lubridate)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", destfile = "getData.csv")
dat <- read.csv("~/getData.csv")
head(dat)
training4 <- dat[year(dat$date) < 2012,]
testing4 <- dat[year(dat$date) > 2011,]
tstrain <- ts(training4$visitsTumblr)
install.packages("forecast")
library(forecast)
?bats
model4 <- bats(training4)
model4 <- bats(tstrain)
library(caret)
pred4 <- predict(model4, testing4)
pred4 <- predict(model4, newdata = testing4)
confusionMatrix(pred4, testing4$visitsTumblr)
head(pred4)
confusionMatrix(pred4[251:365], testing4$visitsTumblr)
head(testing4$visitsTumblr)
plot(pred4[251:365], testing4$visitsTumblr)
dim(pred4)
length(pred4)
confusionMatrix(pred4$x[251:365], testing4$visitsTumblr)
confusionMatrix(pred4$x, testing4$visitsTumblr)
plot(pred4$x, testing4$visitsTumblr)
plot(pred4$x[251:365], testing4$visitsTumblr)
length(pred4$x)
length(pred4$x[251:365])
length(testing4$visitsTumblr)
?ts
head(tstrain)
length(tstrain)
model4
pred4
dim(testing4)
pred4 <- predict(model4, newdata = testing4)
dim(pred4)
length(pred4)
forecast(model4, testing4)
forecast(model4, testing4$visitsTumblr)
?forecast
forecast(testing4, model = model4)
tstesting <- ts(testing4$visitsTumblr)
forecast(tstesting, model = model4)
length(tstesting)
forecast(tstesting, model = model4, h = 235)
mydf <- data.frame(forecast(tstesting, model = model4, h = 235), testing4$visitsTumblr)
mydf <- data.frame(forecast(tstesting, model = model4, h = 235), testresult = testing4$visitsTumblr)
mydfin <- mydf[mydf$testresult>mydf$Lo.95 && mydf$testresult<mydf$Hi.95]
dim(mydf)
head(mydf$testresult)
head(mydf$Lo.95)
mydfin <- mydf[mydf$testresult>mydf$Lo.95 && mydf$testresult<mydf$Hi.95,]
length(mydfin)
dim(mydfin)
mydfin
head(mydf)
mydf$in <- mydf$testresult>mydf$Lo.95 && mydf$testresult<mydf$Hi.95
mydf$in <- (mydf$testresult>mydf$Lo.95 && mydf$testresult<mydf$Hi.95)
mydfin <- mydf[testresult>Lo.95 && testresult<Hi.95,]
mydfin <- mydf[mydf$testresult > mydf$Lo.95 && mydf$testresult < mydf$Hi.95,]
mydfin
mydfin <- mydf[mydf$testresult > mydf$Lo.95 ,]
dim(mydfin)
mydfin <- mydf[mydf$testresult > mydf$Lo.95 & mydf$testresult < mydf$Hi.95,]
dim(mydfin)
dim(mydfin)/dim(mydf)
set.seed(3523)
library(AppliedPredictiveModeling)
data("concrete")
inTrain5 <- createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training5 <- concrete[inTrain,]
testing5 <- concrete[-inTrain5]
training5 <- concrete[inTrain5,]
set.seed(325)
library(e1071)
?svm
model5 <- svm(CompressiveStrength ~ ., concrete)
predict(model5, newdata = testing5)
pred5 <- predict(model5, newdata = testing5)
?predict.svm
predict.svm(model5, newdata = testing5)
pred5 <- predict(model5, newdata = testing5)
?svm
model5 <- svm(CompressiveStrength ~ ., data = concrete)
pred5 <- predict(model5, newdata = testing5)
model5
model5 <- svm(CompressiveStrength ~ ., data = concrete, kernel = "linear", gamma = 1, cost = 2, type="C-classification")
model5 <- svm(CompressiveStrength ~ ., data = concrete , kernel = "linear")
pred5 <- predict(model5, newdata = testing5)
model5 <- svm(CompressiveStrength ~ ., data = concrete)
pred5 <- predict(model5, newdata = testing5)
head(testing5)
head(concrete)
head(inTrain5)
testing5 <- concrete[-inTrain5,]
pred5 <- predict(model5, newdata = testing5)
answer5 <- RMSE(pred5, testing5$CompressiveStrength)
aswer5
answer5
shiny::runApp('GitHub/Day_you_were_born')
weekdays(as.Date(date()))
weekdays(as.Date("1966-08-23"))
?textOutput
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
date()
julian(date())
as.Date(date())
as.POSIXct.date()
as.POSIXct.date(date())
Sys.time()
class(Sys.Date())
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
shiny::runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
runApp('GitHub/Day_you_were_born')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='ypridor', token='BBE231EB6DB2E36A02642DDBB959146F', secret='Khsa+USUlrUfojmIKKLs+yTTm0km6i/zIBfihKDa')
rsconnect::deployApp('C//Users//yoav.BUZZILLA//Documents//GitHub//Day_you_were_born')
library(devtools)
install_github("slidify", "r")
install_github("slidify", "r", "ypridor")
install_github("slidify", "r", ramnathv")
install_github("slidify", "r", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
install_github("slidify", "ramnathv")
install.packages("yaml")
install.packages("yaml")
library(yaml)
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
library(slidify)
author("ypridor")
slidify("index.Rmd")
publish(user = "ypridor", repo = "ypridor")
publish(user = "ypridor", repo = "ypridor")
# Chunk 1
myDate <- "1978-09-25"
myDay <- weekdays(as.Date( myDate ))
print(c("You were born on a :",myDay))
getwd()
install.packages("httpuv")
library(httpuv)
